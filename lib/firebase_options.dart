// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter_dotenv/flutter_dotenv.dart';

import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    // FirebaseOptions() async {
    //   await dotenv.load();
    // }

    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static String iosApiKey = dotenv.get('IOS_API_KEY');
  static String iosAppId = dotenv.get('IOS_APP_ID');
  static String iosMessagingSenderId = dotenv.get('IOS_MESSAGING_SENDER_ID');
  static String iosProjectId = dotenv.get('IOS_PROJECT_ID');
  static String iosStorageBucket = dotenv.get('IOS_STORAGE_BUCKET');
  static String clientId = dotenv.get('IOS_CLIENT_ID');
  static String iosBundleId = dotenv.get('IOS_BUNDLE_ID');

  static String webApiKey = dotenv.get('WEB_API_KEY');
  static String webAppId = dotenv.get('WEB_APP_ID');
  static String webMessagingSenderId = dotenv.get('WEB_MESSAGING_SENDER_ID');
  static String webProjectId = dotenv.get('WEB_PROJECT_ID');
  static String webAuthDomain = dotenv.get('WEB_AUTH_DOMAIN');
  static String webStorageBucket = dotenv.get('WEB_STORAGE_BUCKET');

  static String androidApiKey = dotenv.get('WEB_API_KEY');
  static String androidAppId = dotenv.get('ANDROID_APP_ID');
  static String androidMessagingSenderId =
      dotenv.get('ANDROID_MESSAGING_SENDER_ID');
  static String androidProjectId = dotenv.get('ANDROID_PROJECT_ID');
  static String androidStorageBucket = dotenv.get('ANDROID_STORAGE_BUCKET');

  static String apiKey = dotenv.get('MACOS_API_KEY');
  static String macosAppId = dotenv.get('MACOS_APP_ID');
  static String macosMessagingSenderId =
      dotenv.get('MACOS_MESSAGING_SENDER_ID');
  static String macosProjectId = dotenv.get('MACOS_PROJECT_ID');
  static String macosStorageBucket = dotenv.get('MACOS_STORAGE_BUCKET');
  static String macosIosClientId = dotenv.get('MACOS_IOS_CLIENT_ID');
  static String macosIosBundleId = dotenv.get('MACOS_IOS_BUNDLE_ID');

  static final FirebaseOptions macos = FirebaseOptions(
    apiKey: apiKey,
    appId: macosAppId,
    messagingSenderId: macosMessagingSenderId,
    projectId: macosProjectId,
    storageBucket: macosStorageBucket,
    iosClientId: macosIosClientId,
    iosBundleId: macosIosBundleId,
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: androidApiKey,
    appId: androidAppId,
    messagingSenderId: androidMessagingSenderId,
    projectId: androidProjectId,
    storageBucket: androidStorageBucket,
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: iosApiKey,
    appId: iosAppId,
    messagingSenderId: iosMessagingSenderId,
    projectId: iosProjectId,
    storageBucket: iosStorageBucket,
    iosClientId: clientId,
    iosBundleId: iosBundleId,
  );
  static final FirebaseOptions web = FirebaseOptions(
    apiKey: webApiKey,
    appId: webAppId,
    messagingSenderId: webMessagingSenderId,
    projectId: webProjectId,
    authDomain: webAuthDomain,
    storageBucket: webStorageBucket,
  );
}
